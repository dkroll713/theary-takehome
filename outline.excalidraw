{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "cQcfTwrgQM7pOIZTWTbvV",
      "type": "text",
      "x": 729,
      "y": 180,
      "width": 1088.998779296875,
      "height": 975,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a1",
      "roundness": null,
      "seed": 1115771596,
      "version": 2215,
      "versionNonce": 1664243020,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747704782065,
      "link": null,
      "locked": false,
      "text": "1. an http server that exposes two endpoints\n    a. GET /api/tree - returns an array of all trees that exist in the database\n        \n        SELECT * from nodes where root = true\n        recursively construct each tree\n        place in an array, return the array\n\n\n    b. POST /api/tree - creates a new node and attaches it to the specified parent node in the tree\n        request:\n            { label: \"new label\",\n        insert into nodes (id, parent_id, label) values (\n\n2. a persistence layer within the http server, e.g. data is retained between server starts/stops\n        two obvious solutions: 1) save to file system; 2) save to SQLite\n        less obvious: Redis\n        file system is easy but can easily brake and is also uniquely vulnerable\n        sqlite is perhaps most obvious - just a local sqlite db acting like a true database\n        redis would work but seems overly complex for this use case?\n\n        sqlite - one table TREES (id autoincrement, label string, parent_id not null)\n                    OR two tables, one ROOT() which represents a whole tree and one TREES\n                    which contains all the nodes of each tree\n\n        questions:\n            can we delete from tree via api? not currently\n                need to handle gracefully, will require rework and logic\n                if deleting root, delete whole tree or reassign root? who gets new root?\n                if deleting node in tree, delete all children or just slide them up tree?\n            how do we add new roots?\n                perhaps if parent_id is left blank it will assume it's a root\n3. testing is implemented to ensure the server is behaving as expected\n    GET /api/tree\n        - returns 200 and an arary - expect an array and 200 status\n        - returns full tree list - list matches db seed\n    POST /api/tree\n        - valid data creates a node - 201 status, correct node in node table\n        - missing name - status 400\n        - no parent_id - creates new entry in root table AND new node in node table, status 201",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1. an http server that exposes two endpoints\n    a. GET /api/tree - returns an array of all trees that exist in the database\n        \n        SELECT * from nodes where root = true\n        recursively construct each tree\n        place in an array, return the array\n\n\n    b. POST /api/tree - creates a new node and attaches it to the specified parent node in the tree\n        request:\n            { label: \"new label\",\n        insert into nodes (id, parent_id, label) values (\n\n2. a persistence layer within the http server, e.g. data is retained between server starts/stops\n        two obvious solutions: 1) save to file system; 2) save to SQLite\n        less obvious: Redis\n        file system is easy but can easily brake and is also uniquely vulnerable\n        sqlite is perhaps most obvious - just a local sqlite db acting like a true database\n        redis would work but seems overly complex for this use case?\n\n        sqlite - one table TREES (id autoincrement, label string, parent_id not null)\n                    OR two tables, one ROOT() which represents a whole tree and one TREES\n                    which contains all the nodes of each tree\n\n        questions:\n            can we delete from tree via api? not currently\n                need to handle gracefully, will require rework and logic\n                if deleting root, delete whole tree or reassign root? who gets new root?\n                if deleting node in tree, delete all children or just slide them up tree?\n            how do we add new roots?\n                perhaps if parent_id is left blank it will assume it's a root\n3. testing is implemented to ensure the server is behaving as expected\n    GET /api/tree\n        - returns 200 and an arary - expect an array and 200 status\n        - returns full tree list - list matches db seed\n    POST /api/tree\n        - valid data creates a node - 201 status, correct node in node table\n        - missing name - status 400\n        - no parent_id - creates new entry in root table AND new node in node table, status 201",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "efFulgsRmawC7OO4_86I2",
      "type": "rectangle",
      "x": 2237.436507936508,
      "y": 221.56349206349205,
      "width": 341.1111111111113,
      "height": 343.33333333333326,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": {
        "type": 3
      },
      "seed": 1168178292,
      "version": 355,
      "versionNonce": 260538868,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370410,
      "link": null,
      "locked": false
    },
    {
      "id": "7VxheHRDYxk57i7J_aaPi",
      "type": "text",
      "x": 1915.2142857142858,
      "y": 181.56349206349205,
      "width": 197.99972534179688,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a3",
      "roundness": null,
      "seed": 508346740,
      "version": 271,
      "versionNonce": 1957372788,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370410,
      "link": null,
      "locked": false,
      "text": "One table approach",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "One table approach",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "ILLyUwusrM-4NBLIXeCuY",
      "type": "text",
      "x": 2269.6587301587306,
      "y": 279.3412698412698,
      "width": 241.99966430664062,
      "height": 100,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a4",
      "roundness": null,
      "seed": 2121577076,
      "version": 343,
      "versionNonce": 132027636,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370410,
      "link": null,
      "locked": false,
      "text": "id: autoincrement int,\nparent_id: int,\nlabel: string,\n",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "id: autoincrement int,\nparent_id: int,\nlabel: string,\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "_Afm1Ztwi3K0g0UvisCAm",
      "type": "rectangle",
      "x": 1845.769841269841,
      "y": 631.0079365079365,
      "width": 341.1111111111113,
      "height": 343.33333333333326,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a5",
      "roundness": {
        "type": 3
      },
      "seed": 932418804,
      "version": 378,
      "versionNonce": 380098164,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1747701370410,
      "link": null,
      "locked": false
    },
    {
      "id": "7T0vtB7LESOuR6i5MoLFc",
      "type": "text",
      "x": 2341.8809523809523,
      "y": 241.56349206349202,
      "width": 54.99992370605469,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a6",
      "roundness": null,
      "seed": 747439308,
      "version": 274,
      "versionNonce": 1305274356,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370410,
      "link": null,
      "locked": false,
      "text": "NODES",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "NODES",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "3qU_UG7xZr-AcYz5Mw1ZW",
      "type": "text",
      "x": 1977.436507936508,
      "y": 643.7857142857143,
      "width": 43.99993896484375,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a7",
      "roundness": null,
      "seed": 1361177460,
      "version": 280,
      "versionNonce": 1364445556,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370410,
      "link": null,
      "locked": false,
      "text": "ROOT",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "ROOT",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "jwcFXEAyrmf8E8e05Zene",
      "type": "rectangle",
      "x": 2243.5476190476193,
      "y": 628.7857142857141,
      "width": 341.1111111111113,
      "height": 343.33333333333326,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a8",
      "roundness": {
        "type": 3
      },
      "seed": 1991009908,
      "version": 407,
      "versionNonce": 1417837300,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1747701370411,
      "link": null,
      "locked": false
    },
    {
      "id": "dZA1kf29AtB5bbMyhU58c",
      "type": "text",
      "x": 2382.9920634920636,
      "y": 640.4523809523808,
      "width": 54.99992370605469,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a9",
      "roundness": null,
      "seed": 1313137524,
      "version": 276,
      "versionNonce": 836697204,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370411,
      "link": null,
      "locked": false,
      "text": "NODES",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "NODES",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "c3LIrt6bOZ2A1Q_Py13kH",
      "type": "text",
      "x": 1870.7698412698414,
      "y": 684.8968253968253,
      "width": 241.99966430664062,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aA",
      "roundness": null,
      "seed": 2033996748,
      "version": 318,
      "versionNonce": 53431796,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370411,
      "link": null,
      "locked": false,
      "text": "id: autoincrement int,",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "id: autoincrement int,",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "iEdB8IEKmqv_HbHJHeUUq",
      "type": "text",
      "x": 2260.769841269842,
      "y": 678.2301587301587,
      "width": 241.99966430664062,
      "height": 100,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aB",
      "roundness": null,
      "seed": 1206356172,
      "version": 380,
      "versionNonce": 964259700,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370411,
      "link": null,
      "locked": false,
      "text": "id: autoincrement int,\nparent_id: int,\nlabel: string,\nroot_id: int FK",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "id: autoincrement int,\nparent_id: int,\nlabel: string,\nroot_id: int FK",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "JuMVlbrzf5b8PVkV21ZlE",
      "type": "text",
      "x": 1865.2142857142862,
      "y": 588.2301587301587,
      "width": 197.99972534179688,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aC",
      "roundness": null,
      "seed": 2048915572,
      "version": 271,
      "versionNonce": 889413876,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370411,
      "link": null,
      "locked": false,
      "text": "Two table approach",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Two table approach",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "dhwKA8hy2WpjAl9hcpsDf",
      "type": "text",
      "x": 2666.3253968253966,
      "y": 234.89682539682536,
      "width": 857.9990234375,
      "height": 250,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aD",
      "roundness": null,
      "seed": 106815820,
      "version": 576,
      "versionNonce": 1565729396,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370411,
      "link": null,
      "locked": false,
      "text": "pros:\n    - simple\n    - low maintenance\n    - meets requirements\n\ncons:\n    - unwieldly at scale\n    - trees need to be parsed by api\n    - n+1 sql queries to construct one tree where n is the number of nodes, OR\n      one massive sql query to be manipulated in the back-end",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "pros:\n    - simple\n    - low maintenance\n    - meets requirements\n\ncons:\n    - unwieldly at scale\n    - trees need to be parsed by api\n    - n+1 sql queries to construct one tree where n is the number of nodes, OR\n      one massive sql query to be manipulated in the back-end",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "O2KprDgtpqCGqMSQO89G4",
      "type": "text",
      "x": 2666.3253968253966,
      "y": 646.0079365079365,
      "width": 637.9992065429688,
      "height": 225,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aE",
      "roundness": null,
      "seed": 884722036,
      "version": 608,
      "versionNonce": 959362036,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701370411,
      "link": null,
      "locked": false,
      "text": "pros:\n    - much easier to construct whole tree\n    - one sql query to retrieve all roots\n    - one sql query per tree to retrieve all nodes in tree\n\ncons:\n    - more complex => more opportunities to break\n    - if we upgrade to allow node deletion it would\n      require an extensive refactor",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "pros:\n    - much easier to construct whole tree\n    - one sql query to retrieve all roots\n    - one sql query per tree to retrieve all nodes in tree\n\ncons:\n    - more complex => more opportunities to break\n    - if we upgrade to allow node deletion it would\n      require an extensive refactor",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "aIkeemL1AI28S_JJL-hI7",
      "type": "text",
      "x": 1038.3888888888869,
      "y": -79.94444444444463,
      "width": 417.99945068359375,
      "height": 100,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aF",
      "roundness": null,
      "seed": 811823564,
      "version": 129,
      "versionNonce": 780966476,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747704600201,
      "link": null,
      "locked": false,
      "text": "Tech stack:\n    Typescript & Express - back-end\n    SQLite - persistence\n    Jest, possibly supertest - testing",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Tech stack:\n    Typescript & Express - back-end\n    SQLite - persistence\n    Jest, possibly supertest - testing",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "brEujDq8Jk640826nxROP",
      "type": "text",
      "x": 1914.1031746031733,
      "y": -66.49206349206372,
      "width": 725.9991455078125,
      "height": 75,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aG",
      "roundness": null,
      "seed": 310659188,
      "version": 167,
      "versionNonce": 683683020,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1747701569377,
      "link": null,
      "locked": false,
      "text": "Assumptions:\n    unsorted, non-unique, non-binary\n    purely heirarchical, either a node has a parent or it's a root",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Assumptions:\n    unsorted, non-unique, non-binary\n    purely heirarchical, either a node has a parent or it's a root",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}